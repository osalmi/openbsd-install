mkdir -p /tmp2 && mount -t tmpfs tmpfs /tmp2

pre_prepconf() {
	local _dk _hash _password

	cat > /install.conf <<EOF
Choose your keyboard = sv
System hostname = localhost
Start sshd(8) = yes
Start ntpd(8) = yes
Use (W)hole disk, = whole
Location of sets = http
Set name(s) = all
EOF

	[[ -n "$CONSOLE" ]] && \
		echo "Change the default console = y" >> /install.conf

	for _dk in $(get_dkdevs); do
		makedev $_dk || exit
		mount -r /dev/${_dk}a /mnt2 2>/dev/null || continue
		_hash=
		[[ -s /mnt2/etc/master.passwd ]] && \
			_hash=$(sed -n 's/^root:\([^:]*\):.*/\1/p' /mnt2/etc/master.passwd)
		umount -f /mnt2
		if [[ -n "$_hash" ]]; then
			echo "Password for root = $_hash" >> /install.conf
			break
		fi
	done

	if [[ -z "$_hash" ]]; then
		while :; do
			auto=false askpassword "Password for root account?"
			[[ -n "$_password" ]] && break
			echo "The root password must be set."
		done
		echo "Password for root = $_password" >> /install.conf
	fi
}

pre_preserve() {
	local _dk

	echo "Attempting to preserve files from previous install:"
	for _dk in $(get_dkdevs); do
		makedev $_dk || exit
		mount -r /dev/${_dk}a /mnt2 || continue

		if [[ -s /mnt2/etc/fstab ]]; then
			egrep '^(/dev/[sw]d[0-9]+[a-z]|[0-9a-f]+\.[a-z])[[:space:]]+/[^[:space:]]+[[:space:]]+ffs' \
				/mnt2/etc/fstab > /tmp/fstab.preserve
		else
			umount -f /mnt2
			continue
		fi

		if [[ -d /mnt2/etc/puppet/ssl ]]; then
			mkdir -p /tmp2/preserve
			( cd /mnt2 &&
				tar cf - \
				etc/puppet/ssl \
				etc/puppet/puppet.conf \
				| tar xpvf - -C /tmp2/preserve
			)
		fi

		if [[ -d /mnt2/etc/ssh ]]; then
			mkdir -p /tmp2/preserve
			( cd /mnt2 &&
				tar cf - \
				etc/ssh/ssh_host_* \
				| tar xpvf - -C /tmp2/preserve
			)
		fi

		umount -f /mnt2
		break
	done
}

pre_disklabel() {
	local _memsize _rootsize _swapsize _swapmax

	# determine swap size (2 x memory, max 20% of disk)
	_memsize=$(scan_dmesg '/real mem/s/.*(\([0-9]*\)MB)/\1/p')
	_rootsize=$(disklabel -p m $ROOTDISK | sed -n '/^[[:space:]]*c:/s/[^0-9]*\([0-9]*\)\.[0-9]M.*/\1/p')
	_swapsize=$(( $_memsize * 2 ))
	_swapmax=$(( $_rootsize / 5 ))
	[[ $_swapsize -gt $_swapmax ]] && _swapsize=$_swapmax

	echo "Determined swap size: ${_swapsize}MB"

	cat > /tmp/disklabel.${ROOTDISK} <<EOF
z
a b

${_swapsize}M

a a



/
w
q
EOF
}
